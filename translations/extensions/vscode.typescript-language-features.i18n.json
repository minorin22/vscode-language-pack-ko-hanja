{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"(loading...)/Prefix displayed for hover entries while the server is still loading": "(로드 中...)",
			"...1 additional file not shown": "...1個의 追加 파일이 表示되지 않음",
			"...{0} additional files not shown": "...{0}個의 追加 파일이 表示되지 않음",
			"1 implementation": "具現 1個",
			"1 reference": "參照 1個",
			"Acquiring typings definitions for IntelliSense./Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "IntelliSense에 對한 typings 定義를 가져오는 중입니다.",
			"Acquiring typings.../Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "入力을 가져오는 中...",
			"Add all missing imports": "모든 누락된 가져오기 追加",
			"Allow": "許容",
			"Always": "恒常",
			"An error occurred while renaming file": "파일 이름을 바꾸는 중 誤謬 發生",
			"Checking for update of JS/TS imports": "JS/TS 가져오기 업데이트 確認",
			"Configure Excludes": "除外 構成",
			"Configure jsconfig": "jsconfig 構成",
			"Configure jsconfig.json": "jsconfig.json 構成",
			"Configure tsconfig": "tsconfig 構成",
			"Configure tsconfig.json": "tsconfig.json 構成",
			"Could not apply refactoring": "리팩터링을 適用할 수 없습니다.",
			"Could not detect a Node installation to run TS Server.": "TS 서버를 實行할 노드 設置를 檢索할 수 없습니다.",
			"Could not determine TypeScript or JavaScript project": "TypeScript 또는 JavaScript 프로젝트를 確認할 수 없습니다.",
			"Could not determine TypeScript or JavaScript project. Unsupported file type": "TypeScript 또는 JavaScript 프로젝트를 確認할 수 없습니다. 支援되지 않는 파일 形式",
			"Could not determine references": "參照를 確認할 수 없음",
			"Could not install typings files for JavaScript language features. Please ensure that NPM is installed, or configure 'typescript.npm' in your user settings. Alternatively, check the [documentation]({0}) to learn more.": "JavaScript 言語 機能에 對한 入力 파일을 設置할 수 없습니다. NPM이 設置되어 있는지 確認하거나 使用者 設定에서 'typescript.npm'을 構成하세요. 자세히 알아보려면 [說明서]({0})를 確認하세요.",
			"Could not load the TypeScript version at this path": "이 經路에서 TypeScript 버전을 로드할 수 없음",
			"Could not open TS Server log file": "TS 서버 로그 파일을 열 수 없습니다.",
			"Disable logging": "로깅 使用 안 함",
			"Disables semantic checking in a JavaScript file. Must be at the top of a file.": "JavaScript 파일에서 의미 檢査를 使用하지 않습니다. 파일의 최상단에 있어야 합니다.",
			"Dismiss": "解除",
			"Don't Show Again": "다시 表示 안 함",
			"Don't show again": "다시 表示 안 함",
			"Enable logging and restart TS server": "로깅 使用 및 TS 서버 다시 始作",
			"Enables semantic checking in a JavaScript file. Must be at the top of a file.": "JavaScript 파일에서 의미 檢査를 使用합니다. 파일의 최상단에 있어야 합니다.",
			"Enter file path": "파일 經路 入力",
			"Enter new file path...": "새 파일 經路 入力...",
			"Extract to constant": "상수로 추출",
			"Extract to function": "函數로 추출",
			"Failed to resolve {0} as module": "{0}을(를) 모듈로 確認하지 못했습니다.",
			"Fetching data for better TypeScript IntelliSense": "TypeScript IntelliSense를 개선하기 위해 情報를 가져오는 중",
			"File is not part of a JavaScript project. View the [jsconfig.json documentation]({0}) to learn more.": "파일이 JavaScript 프로젝트의 一部가 아닙니다. 자세한 內容은 [jsconfig.json 說明서]({0})를 參照하세요.",
			"File is not part of a TypeScript project. View the [tsconfig.json documentation]({0}) to learn more.": "파일이 TypeScript 프로젝트의 一部가 아닙니다. 자세한 內容은 [tsconfig.json 說明서]({0})를 參照하세요.",
			"File is not part opened folders": "파일이 열린 폴더의 一部가 아닙니다.",
			"Find file references failed. No resource provided.": "파일 參照를 찾지 못했습니다. 리소스가 提供되지 않았습니다.",
			"Find file references failed. Requires TypeScript 4.2+.": "파일 參照를 찾지 못했습니다. TypeScript 4.2 이상이 必要합니다.",
			"Find file references failed. Unknown file type.": "파일 參照를 찾지 못했습니다. 알 수 없는 파일 形式입니다.",
			"Find file references failed. Unsupported file type.": "파일 參照를 찾지 못했습니다. 支援되지 않는 파일 形式입니다.",
			"Finding file references": "파일 參照를 찾는 중",
			"Finding source definitions": "原本 定義 찾기",
			"Fix all fixable JS/TS issues": "수정 可能한 모든 JS/TS 問題 수정",
			"Follow link": "링크로 移動",
			"Go to Source Definition failed. No resource provided.": "原本 定義로 移動하지 못했습니다. 리소스가 提供되지 않았습니다.",
			"Go to Source Definition failed. Requires TypeScript 4.7+.": "原本 定義로 移動하지 못했습니다. TypeScript 4.7 이상이 必要합니다.",
			"Go to Source Definition failed. Unknown file type.": "原本 定義로 移動하지 못했습니다. 알 수 없는 파일 形式입니다.",
			"Go to Source Definition failed. Unsupported file type.": "原本 定義로 移動하지 못했습니다. 支援되지 않는 파일 形式입니다.",
			"Initializing JS/TS language features": "JS/TS 言語 機能 초기화",
			"JS/TS IntelliSense Status": "JS/TS IntelliSense 狀態",
			"JSDoc comment": "JSDoc 주석",
			"Learn More": "자세한 情報",
			"Learn more about JS/TS refactorings": "JS/TS 리팩터링에 對해 자세히 알아보기",
			"Learn more about managing TypeScript versions": "TypeScript 버전 管理에 對한 자세한 情報",
			"Loading IntelliSense status": "IntelliSense 狀態 로드 중",
			"Move to File": "파일로 移動",
			"Never": "안 함 ",
			"Never in this Workspace": "이 作業 領域에서 안 함",
			"No": "아니요",
			"No jsconfig": "jsconfig 없음",
			"No opened folders": "열린 폴더 없음",
			"No source definitions found.": "原本 定義를 찾을 수 없습니다.",
			"No tsconfig": "tsconfig 없음",
			"Not now": "나중에",
			"Open config file": "構成 파일 열기",
			"Organize Imports": "가져오기 構成",
			"Partial Mode": "部分 모드",
			"Paste with imports": "가져오기로 붙여넣기",
			"Please open a folder in VS Code to use a TypeScript or JavaScript project": "TypeScript 또는 JavaScript 프로젝트를 使用하려면 VS Code의 폴더를 여세요.",
			"Please report an issue against Yarn PnP": "Yarn PnP에 對해 問題를 報告하세요.",
			"Please update your TypeScript version": "TypeScript 버전을 업데이트하세요.",
			"Project Wide IntelliSense not available": "프로젝트 全體 IntelliSense를 使用할 수 없음",
			"Remove Unused Imports": "使用하지 않는 가져오기 除去",
			"Remove all unused code": "使用하지 않는 모든 코드 除去",
			"Report Issue": "問題 신고",
			"Report issue against Yarn PnP": "Yarn PnP에 對한 問題 報告",
			"Select Version": "버전 選擇",
			"Select code action to apply": "適用할 코드 동작 選擇",
			"Select existing file...": "기존 파일 選擇...",
			"Select move destination": "移動 대상 選擇",
			"Select the TypeScript version used for JavaScript and TypeScript language features": "JavaScript 및 TypeScript 言語 機能에 使用되는 TypeScript 버전 選擇",
			"Sort Imports": "가져오기 整列",
			"Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.": "파일 다음 줄에서 @ts-check 誤謬를 억제하며 하나 이상이 존재할 것으로 豫想합니다.",
			"Suppresses @ts-check errors on the next line of a file.": "파일의 다음 행에서 @ts-check 誤謬를 억제합니다.",
			"TS Server has not started logging.": "TS 서버에서 로깅을 始作하지 않았습니다.",
			"TS Server logging is currently enabled which may impact performance.": "TS 서버 로깅이 現在 使用하도록 設定되어 있어 性能에 影響을 미칠 수 있습니다.",
			"TS Server logging is off. Please set 'typescript.tsserver.log' and restart the TS server to enable logging": "TS 서버 로깅이 꺼져 있습니다. “typescript.tsserver.log”를 設定하고 TS 서버를 다시 始作하여 로깅을 使用하도록 設定하세요.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.": "JS/TS 言語 서비스가 지난 5분 동안 5번 衝突했습니다.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.\nThis may be caused by a plugin contributed by one of these extensions: {0}\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 言語 서비스가 지난 5분 동안 5번 衝突했습니다.\n이는 다음 必要 프로그램 중 하나가 기여한 플러그인으로 인해 發生할 수 있습니다. {0}\nVS Code에 問題를 제기하기 전에 이러한 必要을 使用하지 않도록 設定해 보세요.",
			"The JS/TS language service crashed.": "JS/TS 言語 서비스가 衝突했습니다.",
			"The JS/TS language service crashed.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 言語 서비스가 衝突했습니다.\n이는 다음 必要 프로그램 중 하나가 기여한 플러그인으로 인해 發生할 수 있습니다. {0}\nVS Code에 問題를 제기하기 전에 이러한 必要을 使用하지 않도록 設定해 보세요.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.": "JS/TS 言語 서비스가 즉시 5번 衝突했습니다. 서비스가 다시 始作되지 않습니다.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 言語 서비스가 즉시 5번 衝突했습니다. 서비스가 다시 始作되지 않습니다.\n이는 다음 必要 프로그램 중 하나가 기여한 플러그인으로 인해 發生할 수 있습니다. {0}\nVS Code에 問題를 제기하기 전에 이러한 必要을 使用하지 않도록 設定해 보세요.",
			"The current selection cannot be extracted": "現在 選擇 領域을 추출할 수 없습니다.",
			"The path {0} doesn't point to a valid Node installation to run TS Server. Falling back to bundled Node.": "經路 {0}이(가) TS 서버를 實行하는 올바른 노드 設置를 가리키지 않습니다. 번들 노드로 대체합니다.",
			"The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.": "經路 {0}이(가) 올바른 tsserver 設置를 가리키지 않습니다. 包含된 TypeScript 버전을 대신 使用합니다.",
			"The workspace is using a version of the TypeScript Server that has been patched by Yarn PnP. This patching is a common source of bugs.": "作業 領域에서 Yarn PnP에 의해 패치된 TypeScript 서버 버전을 使用하고 있습니다. 이 패치는 버그의 一般的인 소스입니다.",
			"The workspace is using an old version of TypeScript ({0}).\n\nBefore reporting an issue, please update the workspace to use TypeScript {1} or newer to make sure the bug has not already been fixed.": "作業 領域에서 이전 버전의 TypeScript({0})를 使用하고 있습니다.\n\n問題를 報告하기 전에 TypeScript {1} 以上 機能을 使用하도록 作業 領域을 업데이트하여 버그가 아직 수정되지 않았는지 確認하세요.",
			"This workspace contains a TypeScript version. Would you like to use the workspace TypeScript version for TypeScript and JavaScript language features?": "이 作業 領域에는 TypeScript 버전이 包含되어 있습니다. TypeScript 및 JavaScript 言語 機能에 作業 領域 TypeScript 버전을 使用하시겠습니까?",
			"This workspace wants to use the Node installation at '{0}' to run TS Server. Would you like to use it?": "이 作業 領域은 '{0}'의 노드 設置를 使用하여 TS 서버를 實行하려고 합니다. 使用하시겠습니까?",
			"To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}": "프로젝트 全體에서 JavaScript/TypeScript 言語 機能을 使用하도록 設定하려면 {0}과(와) 같이 파일이 많은 폴더를 除外하세요.",
			"To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.": "프로젝트 全體에서 JavaScript/TypeScript 言語 機能을 使用하도록 設定하려면 使用하지 않는 소스 파일이 包含된 큰 폴더를 除外하세요.",
			"TypeScript Server Log": "TypeScript 서버 로그",
			"TypeScript Task in tasks.json contains \"\\\\\". TypeScript tasks tsconfig must use \"/\"": "tasks.json의 TypeScript 作業에 \"\\\\\"가 包含되어 있습니다. TypeScript 作業 tsconfig는 \"/\"를 使用해야 합니다.",
			"TypeScript Version": "TypeScript 버전",
			"TypeScript language server exited with error. Error message is: {0}": "誤謬가 發生하여 TypeScript 言語 서버가 終了되었습니다. 誤謬 메시지: {0}",
			"TypeScript: Configure Excludes": "TypeScript: 除外 構成",
			"Update imports for '{0}'?": "'{0}'에 對한 가져오기를 업데이트하시겠습니까?",
			"Update imports for the following {0} files?": "다음 {0} 파일에 對한 가져오기를 업데이트하시겠습니까?",
			"Use VS Code's Version": "VS Code의 버전 使用",
			"Use Workspace Version": "作業 領域 버전 使用",
			"VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.": "잘못 동작하는 바이러스 감지 도구와 같은 다른 애플리케이션에서 VS Code의 tsserver가 削除되었습니다. VS Code를 다시 設置하세요.",
			"Yes": "예",
			"build - {0}": "빌드 - {0}",
			"destination files": "대상 파일",
			"invalid version": "잘못 된 버전",
			"watch - {0}": "감시 - {0}",
			"{0} (Fix all in file)": "{0} (파일에서 모두 수정)",
			"{0} implementations": "具現 {0}個",
			"{0} references": "參照 {0}個"
		},
		"package": {
			"codeActions.refactor.extract.constant.description": "식을 상수로 추출합니다.",
			"codeActions.refactor.extract.constant.title": "상수 추출",
			"codeActions.refactor.extract.function.description": "메서드 또는 函數에 對한 식추출.",
			"codeActions.refactor.extract.function.title": "추출 函數",
			"codeActions.refactor.extract.interface.description": "인터페이스에 對한 形式을 추출합니다.",
			"codeActions.refactor.extract.interface.title": "인터페이스 추출",
			"codeActions.refactor.extract.type.description": "形式 별칭에 對한 추출 形式입니다.",
			"codeActions.refactor.extract.type.title": "추출 類型",
			"codeActions.refactor.move.newFile.description": "식을 새 파일로 移動합니다.",
			"codeActions.refactor.move.newFile.title": "새 파일로 移動",
			"codeActions.refactor.rewrite.arrow.braces.description": "화살표 函數에서 中括弧를 追加하거나 除去합니다.",
			"codeActions.refactor.rewrite.arrow.braces.title": "화살표 中括弧 다시 쓰기",
			"codeActions.refactor.rewrite.export.description": "基本 내보내기와 명명된 내보내기 間에 變換합니다.",
			"codeActions.refactor.rewrite.export.title": "내보내기 變換",
			"codeActions.refactor.rewrite.import.description": "명명된 가져오기와 네임스페이스 가져오기 間에 變換합니다.",
			"codeActions.refactor.rewrite.import.title": "가져오기 變換",
			"codeActions.refactor.rewrite.parameters.toDestructured.title": "매개 變數를 構造 파괴 個體로 變換",
			"codeActions.refactor.rewrite.property.generateAccessors.description": "'get' 및 'set' 접근자 生成",
			"codeActions.refactor.rewrite.property.generateAccessors.title": "접근자 生成",
			"codeActions.source.organizeImports.title": "가져오기 構成",
			"configuration.implicitProjectConfig.checkJs": "JavaScript 파일의 의미 체계 檢査를 使用하거나 使用하지 않도록 設定합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 設定을 재定義합니다.",
			"configuration.implicitProjectConfig.experimentalDecorators": "프로젝트의 一部가 아닌 JavaScript 파일에서 'experimentalDecorators'를 使用하거나 使用하지 않도록 設定합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 設定을 재定義합니다.",
			"configuration.implicitProjectConfig.module": "프로그램의 모듈 시스템을 設定합니다. 자세한 內容은 https://www.typescriptlang.org/tsconfig#module을 參照하세요.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "프로젝트의 一部가 아닌 JavaScript 및 TypeScript 파일에서 [strict 函數 形式](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)을 使用하거나 使用하지 않도록 設定합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 設定을 재定義합니다.",
			"configuration.implicitProjectConfig.strictNullChecks": "프로젝트의 一部가 아닌 JavaScript 및 TypeScript 파일에서 [strict null 檢査](https://www.typescriptlang.org/tsconfig#strictNullChecks)를 使用하거나 使用하지 않도록 設定합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 設定을 재定義합니다.",
			"configuration.implicitProjectConfig.target": "내보낸 JavaScript에 對한 대상 JavaScript 言語 버전을 設定하고 라이브러리 선언을 包含합니다. 자세한 內容은 https://www.typescriptlang.org/tsconfig#target을 參照하세요.",
			"configuration.inlayHints.enumMemberValues.enabled": "열거형 선언의 멤버 값에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nenum MyValue {\r\n A /* = 0 */;\r\n B /* = 1 */; \r\n}\r\n \r\n```",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "函數 시그니처의 暗示的 返還 形式에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n return Date.now();\r\n } \r\n \r\n```",
			"configuration.inlayHints.parameterNames.enabled": "매개 變數 이름에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "텍스트가 매개變數 이름과 동일한 引數에 對해 매개變數 이름 힌트를 表示하지 않습니다.",
			"configuration.inlayHints.parameterTypes.enabled": "暗示的 매개 變數 類型에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n ```",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "屬性 선언의 暗示的 類型에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nclass Foo {\r\n prop /* :number */ = Date.now();\r\n}\r\n \r\n```",
			"configuration.inlayHints.variableTypes.enabled": "暗示的 變數 類型에 對한 인레이 힌트 活性化/非活性化:\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```",
			"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "이름이 形式 이름과 동일한 變數에 對한 形式 힌트를 表示하지 않습니다.",
			"configuration.javascript.checkJs.checkJs.deprecation": "이 設定은 使用되지 않으며 대신 `js/ts.implicitProjectConfig.checkJs`가 使用됩니다.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "이 設定은 使用되지 않으며 대신 `js/ts.implicitProjectConfig.experimentalDecorators`가 使用됩니다.",
			"configuration.preferGoToSourceDefinition": "대신 [原本 定義로 移動]을 트리거하여 可能한 境遇 [定義로 移動] 作業이 類型 선언 파일을 使用하지 않도록 합니다. 이렇게 하면 [原本 定義로 移動]이 마우스 제스처로 트리거될 수 있습니다.",
			"configuration.suggest.autoImports": "自動 가져오기 提案을 使用하거나 使用하지 않도록 設定합니다.",
			"configuration.suggest.classMemberSnippets.enabled": "클래스 멤버에 對한 코드 조각 완성을 活性化/非活性化합니다.",
			"configuration.suggest.completeFunctionCalls": "매개 變數 서명으로 函數를 完了하세요.",
			"configuration.suggest.completeJSDocs": "提案을 使用하거나 使用하지 않도록 設定하여 JSDoc 주석을 完了합니다.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "選擇的 체인 呼出을 揷入하는 잠재적으로 定義되지 않은 값에 對한 完了 表示를 活性/非活性化합니다. 使用하려면 엄격한 null 檢査가 必要합니다.",
			"configuration.suggest.includeCompletionsForImportStatements": "部分적으로 入力된 가져오기 문에서 가져오기 스타일 自動 완성을 活性/非活性化합니다.",
			"configuration.suggest.jsdoc.generateReturns": "JSDoc 템플릿에 對한 '@returns' 주석 生成을 活性/非活性化합니다.",
			"configuration.suggest.names": "JavaScript 提案에서 파일의 固有한 이름 包含을 使用하거나 使用하지 않도록 設定합니다. 이름 提案은 `@ts-check` 또는 `checkJs`를 使用하여 의미 체계적으로 確認되는 JavaScript 코드에서 恒常 使用하지 않도록 設定됩니다.",
			"configuration.suggest.objectLiteralMethodSnippets.enabled": "個體 리터럴의 메서드에 對한 코드 조각 완성을 活性化/非活性化합니다.",
			"configuration.suggest.paths": "import 문 및 要請 呼出의 經路에 對한 提案을 使用하거나 使用하지 않도록 設定합니다.",
			"configuration.surveys.enabled": "VS Code의 Javascript 및 Typescript 支援을 개선하는 데 도움이 되는 가끔 있는 설문을 使用하거나 使用하지 않도록 設定합니다.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "(실험) 프로젝트 全體 誤謬 報告를 使用합니다.",
			"configuration.tsserver.maxTsServerMemory": "TypeScript 서버 프로세스에 할당할 最大 메모리 양(MB)입니다. 4GB보다 큰 메모리 제한을 使用하려면 '#typescript.tsserver.nodePath#'을 使用하여 使用者 指定 노드 設置로 TS Server를 實行합니다.",
			"configuration.tsserver.nodePath": "使用者 指定 노드 設置에서 TS 서버를 實行합니다. 이 값은 노드 實行 파일의 經路이거나 VS 코드가 노드 設置를 감지하도록 하려는 境遇 'node'일 수 있습니다.",
			"configuration.tsserver.useSeparateSyntaxServer": "構文 關聯 作業(예: 접기 계산 또는 文書 記號 컴퓨팅)에 더 빨리 응답할 수 있는 別途 TypeScript 서버의 生成을 活性/非活性化합니다.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "이 設定은 `typescript.tsserver.useSyntaxServer`를 위해 더 이상 使用되지 않습니다.",
			"configuration.tsserver.useSyntaxServer": "TypeScript가 컴퓨팅 코드 접기와 같은 構文 關聯 作業을 보다 빠르게 처리하기 위해 전용 서버를 始作하는지 與否를 制御합니다.",
			"configuration.tsserver.useSyntaxServer.always": "경량 構文 서버를 使用하여 모든 IntelliSense 作業을 처리하세요. 이 構文 서버는 열린 파일에 대해서만 IntelliSense를 提供할 수 있습니다.",
			"configuration.tsserver.useSyntaxServer.auto": "全體 서버와 構文 作業 전용의 경량 서버를 모두 生成하세요. 構文 서버는 프로젝트를 로드하는 동안 構文 作業을 가속화하고 IntelliSense를 提供하는 데 使用됩니다.",
			"configuration.tsserver.useSyntaxServer.never": "전용 構文 서버를 使用하지 마세요. 단일 서버를 使用하여 모든 IntelliSense 作業을 처리하세요.",
			"configuration.tsserver.useVsCodeWatcher": "TypeScript 대신 VS Code 파일 감시자를 使用합니다. 作業 領域에서 TypeScript 5.4 이상을 使用해야 합니다.",
			"configuration.tsserver.watchOptions": "파일 및 디렉터리 추적에 使用할 감시 전략을 構成합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling": "파일 시스템 이벤트를 使用하는 境遇, 이 옵션은 시스템에 基本 파일 감시자가 부족하고/부족하거나 시스템에서 基本 파일 감시자를 支援하지 않는 境遇 使用되는 폴링 전략을 指定합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "자주 수정되지 않는 파일이 덜 자주 檢査되는 동적 큐를 使用합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "모든 파일의 變更 事項을 고정된 간격으로 초당 여러 번 確認합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "모든 파일에서 1초에 여러 번 變更 內容을 確認하지만, 휴리스틱을 使用하여 特定 形式의 파일은 다른 파일보다 덜 자주 確認합니다.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "디렉터리에서 지연 감시를 使用하지 않습니다. 지연 감시는 많은 파일 變更이 한꺼번에 發生하는 境遇(예: 實行 中인 npm install에서 node_modules 變更) 유용하지만, 덜 一般的인 設定의 境遇 이 플래그를 使用하여 지연 감시를 使用하지 않도록 設定할 수 있습니다.",
			"configuration.tsserver.watchOptions.watchDirectory": "재귀 파일 감시 機能이 없는 시스템에서 全體 디렉터리 트리를 감시하는 方法에 對한 전략입니다.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "수정이 자주 發生하지 않는 디렉터리가 덜 자주 檢査되는 동적 큐를 使用합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "정기적으로 디렉터리를 청크 單位로 폴링합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "모든 디렉터리에서 고정된 간격으로 초당 여러 번 變更 內容을 確認합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "디렉터리 變更에 운영 체제/파일 시스템의 基本 이벤트를 使用하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile": "개별 파일을 감시하는 方法에 對한 전략입니다.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "자주 수정되지 않는 파일이 덜 자주 檢査되는 동적 큐를 使用합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "정기적으로 파일을 청크 單位로 폴링합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "모든 파일의 變更 內容을 고정된 간격으로 초당 여러 번 確認합니다.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "모든 파일의 變更 內容을 1초에 여러 번 確認하지만, 휴리스틱을 使用하여 特定 形式의 파일은 다른 파일보다 덜 자주 確認합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "파일 變更에 운영 체제/파일 시스템의 基本 이벤트를 使用하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "운영 체제/파일 시스템의 基本 이벤트를 使用하여 파일이 包含된 디렉터리의 對한 變更 內容을 受信합니다. 그러면 파일 감시자를 적게 使用할 수 있지만 正確도가 떨어집니다.",
			"configuration.tsserver.web.projectWideIntellisense.enabled": "웹에서 프로젝트 全體 IntelliSense를 使用/使用 안 함으로 設定합니다. VS Code는 信賴할 수 있는 컨텍스트에서 實行되어야 합니다.",
			"configuration.tsserver.web.projectWideIntellisense.suppressSemanticErrors": "프로젝트 全體 IntelliSense를 使用하도록 設定한 境遇에도 웹에서 의미 체계 誤謬를 表示하지 않습니다. 프로젝트 全體 IntelliSense를 使用하도록 設定하지 않았거나 使用할 수 없는 境遇 恒常 켜져 있습니다. `#typescript.tsserver.web.projectWideIntellisense.enabled#`를 參照하세요.",
			"configuration.tsserver.web.typeAcquisition.enabled": "웹에서 패키지 취득을 使用하거나 使用하지 않도록 設定합니다. 이렇게 하면 가져온 패키지에 對해 IntelliSense가 活性化됩니다. '#typescript.tsserver.web.projectWideIntellisense.enabled#'이 必要합니다. 現在 Safari에서 支援되지 않습니다.",
			"configuration.typescript": "TypeScript",
			"configuration.updateImportsOnPaste": "코드를 붙여넣을 때 가져오기를 自動으로 업데이트합니다. TypeScript 5.5 이상이 必要합니다.",
			"description": "JavaScript 및 TypeScript에 對한 多樣한 言語 支援을 提供합니다.",
			"displayName": "TypeScript 및 JavaScript 言語 機能",
			"format.indentSwitchCase": "switch 문의 case 절을 들여쓰기합니다. 作業 領域에서 TypeScript 5.1+를 使用해야 합니다.",
			"format.insertSpaceAfterCommaDelimiter": "쉼표 구분 記號 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterConstructor": "生成子 키워드 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "익명 函數의 function 키워드 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "制御 흐름 문의 키워드 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "비어 있는 여는 中括弧 뒤와 닫는 中括弧 앞의 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 식의 여는 中括弧 뒤와 닫는 中括弧 앞의 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "비어 있지 않은 여는 中括弧 뒤와 닫는 中括弧 앞의 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "비어 있지 않은 여는 大括弧 뒤와 닫는 大括弧 앞에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "비어 있지 않은 여는 括弧 뒤와 닫는 括弧 앞에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "템플릿 文字列의 여는 中括弧 뒤와 닫는 中括弧 앞의 공백 처리를 定義합니다.",
			"format.insertSpaceAfterSemicolonInForStatements": "for 문에서 세미콜론 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceAfterTypeAssertion": "TypeScript에서 形式 어설션 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "이항 연산자 뒤에 오는 공백 처리를 定義합니다.",
			"format.insertSpaceBeforeFunctionParenthesis": "函數 引數 括弧 앞에 오는 공백 처리를 定義합니다.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "制御 블록의 새 줄에 여는 中括弧를 넣을지 定義합니다.",
			"format.placeOpenBraceOnNewLineForFunctions": "函數의 새 줄에 여는 中括弧를 넣을지 定義합니다.",
			"format.semicolons": "選擇的 세미콜론 처리를 定義합니다.",
			"format.semicolons.ignore": "세미콜론을 揷入하거나 除去하지 마세요.",
			"format.semicolons.insert": "문 끝에 세미콜론을 揷入합니다.",
			"format.semicolons.remove": "불必要한 세미콜론을 除去합니다.",
			"inlayHints.parameterNames.all": "리터럴 및 비리터럴 引數에 對한 매개變數 이름 힌트를 活性化합니다.",
			"inlayHints.parameterNames.literals": "리터럴 引數에 대해서만 매개變數 이름 힌트를 活性化합니다.",
			"inlayHints.parameterNames.none": "매개變數 이름 힌트를 非活性化합니다.",
			"javascript.format.enable": "基本 JavaScript 포맷터를 使用하거나 使用하지 않습니다.",
			"javascript.goToProjectConfig.title": "프로젝트 構成(jsconfig/tsconfig)으로 移動합니다.",
			"javascript.preferences.jsxAttributeCompletionStyle.auto": "prop 形式에 따라 特性 이름 뒤에 `={}` 또는 `=\"\"`를 揷入합니다. 文字列 特性에 使用되는 따옴표 形式을 制御하려면 `javascript.preferences.quoteStyle`을 參照하세요.",
			"javascript.referencesCodeLens.enabled": "JavaScript 파일에서 CodeLense 參照를 使用/使用 안 함으로 設定합니다.",
			"javascript.referencesCodeLens.showOnAllFunctions": "JavaScript 파일의 모든 機能에 對한 參照 CodeLens를 使用/使用하지 않도록 設定합니다.",
			"javascript.suggestionActions.enabled": "編輯機에서 JavaScript 파일에 對한 提案 진단을 使用하거나 使用하지 않도록 設定합니다.",
			"javascript.validate.enable": "JavaScript 有效性 檢査를 使用하거나 使用하지 않습니다.",
			"reloadProjects.title": "프로젝트 다시 로드",
			"taskDefinition.tsconfig.description": "TS 빌드를 定義하는 tsconfig 파일입니다.",
			"typescript.autoClosingTags": "JSX 태그의 自動 닫기를 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.check.npmIsInstalled": "[自動 形式 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 위해 npm이 設置되어 있는지 確認하세요.",
			"typescript.disableAutomaticTypeAcquisition": "[自動 形式 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 使用하지 않도록 設定합니다. 自動 形式 인식은 npm에서 '@types' 패키지를 가져와 외부 라이브러리에 對한 IntelliSense를 개선합니다.",
			"typescript.enablePromptUseWorkspaceTsdk": "Intellisense 作業 領域에서 構成된 TypeScript 버전을 使用하라는 메시지를 使用者에게 表示할 수 있습니다.",
			"typescript.findAllFileReferences": "파일 參照 찾기",
			"typescript.format.enable": "基本 TypeScript 포맷터를 使用하거나 使用하지 않습니다.",
			"typescript.goToProjectConfig.title": "프로젝트 構成(tsconfig)으로 移動",
			"typescript.goToSourceDefinition": "原本 定義로 移動",
			"typescript.implementationsCodeLens.enabled": "CodeLens 具現을 使用하거나 使用하지 않습니다. 이 CodeLens는 인터페이스의 具現자를 表示합니다.",
			"typescript.implementationsCodeLens.showOnInterfaceMethods": "具現 인터페이스의 CodeLens 메서드를 活性化/非活性化합니다.",
			"typescript.locale": "JavaScript 및 TypeScript 誤謬를 報告하는 데 使用되는 로케일을 設定합니다. 基本값은 VS Code의 로케일을 使用하는 것입니다.",
			"typescript.locale.auto": "VS Code의 構成된 表示 言語 使用",
			"typescript.npm": "[自動 形式 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)에 使用되는 npm 實行 파일의 經路를 指定합니다.",
			"typescript.openTsServerLog.title": "TS 서버 로그 열기",
			"typescript.preferences.autoImportFileExcludePatterns": "自動 가져오기에서 除外할 파일의 GLOB 패턴을 指定합니다. 相對 經路는 作業 領域 루트를 基準으로 確認됩니다. 패턴은 tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) 의미 체계를 使用하여 평가됩니다.",
			"typescript.preferences.importModuleSpecifier": "自動 가져오기의 基本 經路 스타일입니다.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "`jsconfig.json` / `tsconfig.json`에 構成된 `baseUrl` 또는 `paths`를 基盤으로 相對的이지 않은 가져오기를 使用합니다.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "相對 가져오기 經路가 패키지 또는 프로젝트 디렉터리를 벗어나는 境遇에만 비 相對 가져오기를 선호합니다.",
			"typescript.preferences.importModuleSpecifier.relative": "가져온 파일 位置의 相對 經路를 使用합니다.",
			"typescript.preferences.importModuleSpecifier.shortest": "相對的 가져오기보다 적은 經路 세그먼트가 包含된 가져오기가 使用 可能한 境遇에만 相對的이지 않은 가져오기를 使用합니다.",
			"typescript.preferences.importModuleSpecifierEnding": "自動 가져오기를 위한 基本 經路 끝자리.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "프로젝트 設定을 使用하여 基本값을 選擇합니다.",
			"typescript.preferences.importModuleSpecifierEnding.index": "`./component/index.js`를 `./component/index`로 줄입니다.",
			"typescript.preferences.importModuleSpecifierEnding.js": "經路 끝部分을 줄이지 마세요. `.js` 또는 `.ts` 必要名을 包含하세요.",
			"typescript.preferences.importModuleSpecifierEnding.label.js": ".js / .ts",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "`./component/index.js`를 `./component`로 줄입니다.",
			"typescript.preferences.includePackageJsonAutoImports": "使用할 수 있는 自動 가져오기 機能의 'package.json' 從屬性을 檢索하도록/하지 않도록 設定합니다.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "豫想 性能 影響에 따라 從屬性을 檢索합니다.",
			"typescript.preferences.includePackageJsonAutoImports.off": "從屬性을 檢索하지 않습니다.",
			"typescript.preferences.includePackageJsonAutoImports.on": "從屬性을 恒常 檢索합니다.",
			"typescript.preferences.jsxAttributeCompletionStyle": "JSX 特性 완성에 선호되는 스타일입니다.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "prop 形式에 따라 特性 이름 뒤에 `={}` 또는 `=\"\"`를 揷入합니다. 文字列 特性에 使用되는 따옴표 形式을 制御하려면 `typescript.preferences.quoteStyle`을 參照하세요.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "屬性 이름 뒤에 `={}`를 揷入하세요.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "特性 이름만 揷入하세요.",
			"typescript.preferences.preferTypeOnlyAutoImports": "可能한 境遇 恒常 自動 가져오기에 `type` 키워드를 包含합니다. 作業 領域에서 TypeScript 5.3 이상을 使用해야 합니다.",
			"typescript.preferences.quoteStyle": "빠른 수정에 使用할 基本 견적 스타일입니다.",
			"typescript.preferences.quoteStyle.auto": "기존 코드에서 따옴표 形式 유추",
			"typescript.preferences.quoteStyle.double": "恒常 큰따옴표(`\"`) 使用",
			"typescript.preferences.quoteStyle.single": "恒常 작은따옴표(`'`) 使用",
			"typescript.preferences.renameMatchingJsxTags": "JSX 태그에서 記號 이름을 바꾸는 대신 一致하는 태그의 이름을 바꾸세요. 作業 領域에서 TypeScript 5.1 이상을 使用해야 합니다.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "'typescript.preferences.renameShorthandProperties' 設定 대신 'typescript.preferences.useAliasesForRenames'가 使用됩니다.",
			"typescript.preferences.useAliasesForRenames": "이름을 바꾸는 동안 個體 줄임 屬性의 별칭 소개를 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.problemMatchers.tsc.label": "TypeScript 問題",
			"typescript.problemMatchers.tscWatch.label": "TypeScript 問題(감시 모드)",
			"typescript.referencesCodeLens.enabled": "TypeScript 파일에서 參照 CodeLens를 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.referencesCodeLens.showOnAllFunctions": "TypeScript 파일의 모든 機能에 對한 參照 CodeLens를 使用/使用하지 않도록 設定합니다.",
			"typescript.removeUnusedImports": "使用하지 않는 가져오기 除去",
			"typescript.reportStyleChecksAsWarnings": "스타일 檢査를 警告로 報告합니다.",
			"typescript.restartTsServer": "TS 서버 다시 始作",
			"typescript.selectTypeScriptVersion.title": "TypeScript 버전 選擇...",
			"typescript.sortImports": "가져오기 整列",
			"typescript.suggest.enabled": "自動 완성 提案을 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.suggestionActions.enabled": "編輯機에서 TypeScript 파일에 對한 提案 진단을 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.tsc.autoDetect": "tsc 作業의 自動 檢索을 制御합니다.",
			"typescript.tsc.autoDetect.build": "단일 實行 컴파일 作業만 만듭니다.",
			"typescript.tsc.autoDetect.off": "이 機能을 使用하지 않도록 設定합니다.",
			"typescript.tsc.autoDetect.on": "빌드 및 조사식 作業을 모두 만듭니다.",
			"typescript.tsc.autoDetect.watch": "컴파일 및 조사식 作業만 만듭니다.",
			"typescript.tsdk.desc": "IntelliSense에 使用할 TypeScript 設置에서 tsserver 및 `lib*.d.ts` 파일의 폴더 經路를 指定합니다. 예: `./node_modules/typescript/lib`.\r\n\r\n- 使用者 設定으로 指定한 境遇 'typescript.tsdk'의 TypeScript 버전이 自動으로 基本 提供 TypeScript 버전을 바꿉니다.\r\n- 作業 領域 設定으로 指定한 境遇 'typescript.tsdk'를 使用하여 'TypeScript: TypeScript 버전 選擇' 命令으로 IntelliSense용 TypeScript의 該當 作業 領域 버전을 使用하도록 轉換할 수 있습니다.\r\n\r\nTypeScript 버전 管理에 對한 자세한 內容은 [TypeScript 說明서](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)를 參照하세요.",
			"typescript.tsserver.enableTracing": "디렉터리에 對해 TS 서버 性能 추적을 使用하도록 設定합니다. 이 추적 파일은 TS 서버 性能 問題를 진단하는 데 使用될 수 있습니다. 로그에는 파일 經路, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 情報가 包含될 수 있습니다.",
			"typescript.tsserver.log": "파일에 對해 TS 서버 로깅을 使用하도록 設定합니다. 이 로그는 TS 서버 問題를 진단하는 데 使用될 수 있습니다. 로그에는 파일 經路, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 情報가 包含될 수 있습니다.",
			"typescript.tsserver.pluginPaths": "TypeScript 言語 서비스 플러그 인을 檢索할 追加 經路입니다.",
			"typescript.tsserver.pluginPaths.item": "絶對 또는 相對 經路입니다. 相對 經路는 作業 領域 폴더를 基準으로 確認됩니다.",
			"typescript.tsserver.trace": "TS 서버로 전송한 메시지 추적을 使用하도록 設定합니다. 이 추적은 TS 서버 問題를 진단하는 데 使用될 수 있습니다. 추적에는 파일 經路, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 情報가 包含될 수 있습니다.",
			"typescript.updateImportsOnFileMove.enabled": "VS Code에서 파일을 移動하거나 이름을 바꿀 때 가져오기 經路의 自動 업데이트를 使用하거나 使用하지 않도록 設定합니다.",
			"typescript.updateImportsOnFileMove.enabled.always": "恒常 經路를 自動으로 업데이트합니다.",
			"typescript.updateImportsOnFileMove.enabled.never": "經路 이름을 바꾸지 않고 메시지를 表示하지 않습니다.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "이름을 바꿀 때마다 프롬프트를 表示합니다.",
			"typescript.validate.enable": "TypeScript 有效性 檢査를 使用하거나 使用하지 않습니다.",
			"typescript.workspaceSymbols.excludeLibrarySymbols": "Go to Symbol in Workspace(作業 領域에서 記號로 移動) 結果의 라이브러리 파일에서 가져온 記號를 除外합니다. 作業 領域에서 TypeScript 5.3+를 使用해야 합니다.",
			"typescript.workspaceSymbols.scope": "[作業 領域에서 記號로 移動](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)하여 檢索할 파일을 制御합니다.",
			"typescript.workspaceSymbols.scope.allOpenProjects": "열려 있는 모든 JavaScript 또는 TypeScript 프로젝트에서 記號를 檢索합니다.",
			"typescript.workspaceSymbols.scope.currentProject": "現在 JavaScript 또는 TypeScript 프로젝트에서만 記號를 檢索합니다.",
			"virtualWorkspaces": "假想 作業 空間에서는 파일에서 參照를 確認하고 찾는 機能이 支援되지 않습니다.",
			"walkthroughs.nodejsWelcome.debugJsFile.altText": "Visual Studio Code를 使用하여 Node.js에서 JavaScript 코드를 디버그하고 實行합니다.",
			"walkthroughs.nodejsWelcome.debugJsFile.description": "Node.js를 設置하면 ``node your-file-name.js``를 入力하여 터미널에서 JavaScript 프로그램을 實行할 수 있습니다.\r\nNode.js 프로그램을 實行하는 또 다른 쉬운 方法은 VS Code의 디버거를 使用하는 것입니다. 이 디버거를 使用하면 코드를 實行하고, 다른 지점에서 一時 中止하고, 段階별 進行 상황을 이해할 수 있습니다.\r\n[디버깅 始作](command:javascript-walkthrough.commands.debugJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.title": "JavaScript 實行 및 디버그",
			"walkthroughs.nodejsWelcome.description": "Visual Studio Code의 최고 JavaScript 環境을 最大한 활용하세요.",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js는 JavaScript 코드를 實行하는 쉬운 方法입니다. 이를 使用하여 命令줄 앱과 서버를 빠르게 구축할 수 있습니다. 또한 JavaScript 코드를 쉽게 재使用하고 共有할 수 있는 패키지 管理者인 npm이 함께 提供됩니다.\r\n[Node.js 設置](https://nodejs.org/en/download/package-manager/)",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Node.js 設置",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js는 JavaScript 코드를 實行하는 쉬운 方法입니다. 이를 使用하여 命令줄 앱과 서버를 빠르게 구축할 수 있습니다. 또한 JavaScript 코드를 쉽게 재使用하고 共有할 수 있는 패키지 管理者인 npm이 함께 提供됩니다.\r\n[Node.js 設置](https://nodejs.org/en/download/)",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Node.js 設置",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "Visual Studio Code의 JavaScript 및 Node.js에 對해 자세히 알아보세요.",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "JavaScript, Node.js 및 VS Code에 더 익숙해지고 싶으십니까? 文書를 確認하세요.\r\n[JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) 및 [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial) 학습을 위한 많은 리소스가 있습니다.\r\n\r\n[자세한 情報](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "追加 探索",
			"walkthroughs.nodejsWelcome.makeJsFile.description": "첫 番째 JavaScript 파일을 作成해 보겠습니다. 새 파일을 만들고 파일 이름 끝에 ``.js`` 必要자로 貯藏해야 합니다.\r\n[JavaScript 파일 만들기](command:javascript-walkthrough.commands.createJsFile)",
			"walkthroughs.nodejsWelcome.makeJsFile.title": "JavaScript 파일 만들기",
			"walkthroughs.nodejsWelcome.title": "JavaScript 및 Node.js 始作하기",
			"workspaceTrust": "必要 機能은 作業 領域에서 指定한 코드를 實行하기 때문에 作業 領域 버전을 使用할 때 作業 領域 信賴가 必要합니다."
		}
	}
}